// Generated by rstantools.  Do not edit by hand.

/*
    powerHLA is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    powerHLA is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with powerHLA.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
// Code generated by Stan version 2.21.0
#include <stan/model/model_header.hpp>
namespace model_dm_namespace {
using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;
static int current_statement_begin__;
stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_dm");
    reader.add_event(28, 26, "end", "model_dm");
    return reader;
}
#include <stan_meta_header.hpp>
class model_dm
  : public stan::model::model_base_crtp<model_dm> {
private:
        int K;
        int B;
        std::vector<std::vector<int> > y_rng;
        std::vector<int> y;
        vector_d a;
public:
    model_dm(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, 0, pstream__);
    }
    model_dm(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, random_seed__, pstream__);
    }
    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        typedef double local_scalar_t__;
        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning
        current_statement_begin__ = -1;
        static const char* function__ = "model_dm_namespace::model_dm";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        try {
            // initialize data block variables from context__
            current_statement_begin__ = 2;
            context__.validate_dims("data initialization", "K", "int", context__.to_vec());
            K = int(0);
            vals_i__ = context__.vals_i("K");
            pos__ = 0;
            K = vals_i__[pos__++];
            check_greater_or_equal(function__, "K", K, 0);
            current_statement_begin__ = 3;
            context__.validate_dims("data initialization", "B", "int", context__.to_vec());
            B = int(0);
            vals_i__ = context__.vals_i("B");
            pos__ = 0;
            B = vals_i__[pos__++];
            check_greater_or_equal(function__, "B", B, 0);
            current_statement_begin__ = 4;
            validate_non_negative_index("y_rng", "B", B);
            validate_non_negative_index("y_rng", "K", K);
            context__.validate_dims("data initialization", "y_rng", "int", context__.to_vec(B,K));
            y_rng = std::vector<std::vector<int> >(B, std::vector<int>(K, int(0)));
            vals_i__ = context__.vals_i("y_rng");
            pos__ = 0;
            size_t y_rng_k_0_max__ = B;
            size_t y_rng_k_1_max__ = K;
            for (size_t k_1__ = 0; k_1__ < y_rng_k_1_max__; ++k_1__) {
                for (size_t k_0__ = 0; k_0__ < y_rng_k_0_max__; ++k_0__) {
                    y_rng[k_0__][k_1__] = vals_i__[pos__++];
                }
            }
            current_statement_begin__ = 5;
            validate_non_negative_index("y", "K", K);
            context__.validate_dims("data initialization", "y", "int", context__.to_vec(K));
            y = std::vector<int>(K, int(0));
            vals_i__ = context__.vals_i("y");
            pos__ = 0;
            size_t y_k_0_max__ = K;
            for (size_t k_0__ = 0; k_0__ < y_k_0_max__; ++k_0__) {
                y[k_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 6;
            validate_non_negative_index("a", "K", K);
            context__.validate_dims("data initialization", "a", "vector_d", context__.to_vec(K));
            a = Eigen::Matrix<double, Eigen::Dynamic, 1>(K);
            vals_r__ = context__.vals_r("a");
            pos__ = 0;
            size_t a_j_1_max__ = K;
            for (size_t j_1__ = 0; j_1__ < a_j_1_max__; ++j_1__) {
                a(j_1__) = vals_r__[pos__++];
            }
            // initialize transformed data variables
            // execute transformed data statements
            // validate transformed data
            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    ~model_dm() { }
    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        typedef double local_scalar_t__;
        stan::io::writer<double> writer__(params_r__, params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;
        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }
    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }
    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(std::vector<T__>& params_r__,
                 std::vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {
        typedef T__ local_scalar_t__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // dummy to suppress unused var warning
        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;
        try {
            stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
            // model parameters
            // model body
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
        lp_accum__.add(lp__);
        return lp_accum__.sum();
    } // log_prob()
    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }
    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("p_rng");
        names__.push_back("p");
        names__.push_back("d_diff");
        names__.push_back("d_or");
        names__.push_back("d_lor");
    }
    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dims__.push_back(B);
        dims__.push_back(K);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(K);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(B);
        dims__.push_back(K);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(B);
        dims__.push_back(K);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(B);
        dims__.push_back(K);
        dimss__.push_back(dims__);
    }
    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        typedef double local_scalar_t__;
        vars__.resize(0);
        stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
        static const char* function__ = "model_dm_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        if (!include_tparams__ && !include_gqs__) return;
        try {
            if (!include_gqs__ && !include_tparams__) return;
            if (!include_gqs__) return;
            // declare and define generated quantities
            current_statement_begin__ = 10;
            validate_non_negative_index("p_rng", "K", K);
            validate_non_negative_index("p_rng", "B", B);
            std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> > p_rng(B, Eigen::Matrix<double, Eigen::Dynamic, 1>(K));
            stan::math::initialize(p_rng, DUMMY_VAR__);
            stan::math::fill(p_rng, DUMMY_VAR__);
            current_statement_begin__ = 11;
            validate_non_negative_index("p", "K", K);
            Eigen::Matrix<double, Eigen::Dynamic, 1> p(K);
            stan::math::initialize(p, DUMMY_VAR__);
            stan::math::fill(p, DUMMY_VAR__);
            current_statement_begin__ = 12;
            validate_non_negative_index("d_diff", "K", K);
            validate_non_negative_index("d_diff", "B", B);
            std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> > d_diff(B, Eigen::Matrix<double, Eigen::Dynamic, 1>(K));
            stan::math::initialize(d_diff, DUMMY_VAR__);
            stan::math::fill(d_diff, DUMMY_VAR__);
            current_statement_begin__ = 13;
            validate_non_negative_index("d_or", "K", K);
            validate_non_negative_index("d_or", "B", B);
            std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> > d_or(B, Eigen::Matrix<double, Eigen::Dynamic, 1>(K));
            stan::math::initialize(d_or, DUMMY_VAR__);
            stan::math::fill(d_or, DUMMY_VAR__);
            current_statement_begin__ = 14;
            validate_non_negative_index("d_lor", "K", K);
            validate_non_negative_index("d_lor", "B", B);
            std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> > d_lor(B, Eigen::Matrix<double, Eigen::Dynamic, 1>(K));
            stan::math::initialize(d_lor, DUMMY_VAR__);
            stan::math::fill(d_lor, DUMMY_VAR__);
            // generated quantities statements
            current_statement_begin__ = 17;
            stan::math::assign(p, dirichlet_rng(to_vector(y), base_rng__));
            current_statement_begin__ = 20;
            for (int b = 1; b <= B; ++b) {
                current_statement_begin__ = 21;
                stan::model::assign(p_rng, 
                            stan::model::cons_list(stan::model::index_uni(b), stan::model::nil_index_list()), 
                            dirichlet_rng(add(to_vector(stan::model::rvalue(y_rng, stan::model::cons_list(stan::model::index_uni(b), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "y_rng")), a), base_rng__), 
                            "assigning variable p_rng");
                current_statement_begin__ = 22;
                stan::model::assign(d_or, 
                            stan::model::cons_list(stan::model::index_uni(b), stan::model::nil_index_list()), 
                            elt_divide(p, get_base1(p_rng, b, "p_rng", 1)), 
                            "assigning variable d_or");
                current_statement_begin__ = 23;
                stan::model::assign(d_lor, 
                            stan::model::cons_list(stan::model::index_uni(b), stan::model::nil_index_list()), 
                            stan::math::log(get_base1(d_or, b, "d_or", 1)), 
                            "assigning variable d_lor");
                current_statement_begin__ = 24;
                stan::model::assign(d_diff, 
                            stan::model::cons_list(stan::model::index_uni(b), stan::model::nil_index_list()), 
                            subtract(p, get_base1(p_rng, b, "p_rng", 1)), 
                            "assigning variable d_diff");
            }
            // validate, write generated quantities
            current_statement_begin__ = 10;
            size_t p_rng_i_0_max__ = B;
            for (size_t i_0__ = 0; i_0__ < p_rng_i_0_max__; ++i_0__) {
                stan::math::check_simplex(function__, "p_rng[i_0__]", p_rng[i_0__]);
            }
            size_t p_rng_j_1_max__ = K;
            size_t p_rng_k_0_max__ = B;
            for (size_t j_1__ = 0; j_1__ < p_rng_j_1_max__; ++j_1__) {
                for (size_t k_0__ = 0; k_0__ < p_rng_k_0_max__; ++k_0__) {
                    vars__.push_back(p_rng[k_0__](j_1__));
                }
            }
            current_statement_begin__ = 11;
            stan::math::check_simplex(function__, "p", p);
            size_t p_j_1_max__ = K;
            for (size_t j_1__ = 0; j_1__ < p_j_1_max__; ++j_1__) {
                vars__.push_back(p(j_1__));
            }
            current_statement_begin__ = 12;
            size_t d_diff_j_1_max__ = K;
            size_t d_diff_k_0_max__ = B;
            for (size_t j_1__ = 0; j_1__ < d_diff_j_1_max__; ++j_1__) {
                for (size_t k_0__ = 0; k_0__ < d_diff_k_0_max__; ++k_0__) {
                    vars__.push_back(d_diff[k_0__](j_1__));
                }
            }
            current_statement_begin__ = 13;
            size_t d_or_j_1_max__ = K;
            size_t d_or_k_0_max__ = B;
            for (size_t j_1__ = 0; j_1__ < d_or_j_1_max__; ++j_1__) {
                for (size_t k_0__ = 0; k_0__ < d_or_k_0_max__; ++k_0__) {
                    vars__.push_back(d_or[k_0__](j_1__));
                }
            }
            current_statement_begin__ = 14;
            size_t d_lor_j_1_max__ = K;
            size_t d_lor_k_0_max__ = B;
            for (size_t j_1__ = 0; j_1__ < d_lor_j_1_max__; ++j_1__) {
                for (size_t k_0__ = 0; k_0__ < d_lor_k_0_max__; ++k_0__) {
                    vars__.push_back(d_lor[k_0__](j_1__));
                }
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng, params_r_vec, params_i_vec, vars_vec, include_tparams, include_gqs, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }
    std::string model_name() const {
        return "model_dm";
    }
    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
        }
        if (!include_gqs__) return;
        size_t p_rng_j_1_max__ = K;
        size_t p_rng_k_0_max__ = B;
        for (size_t j_1__ = 0; j_1__ < p_rng_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < p_rng_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "p_rng" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t p_j_1_max__ = K;
        for (size_t j_1__ = 0; j_1__ < p_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "p" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t d_diff_j_1_max__ = K;
        size_t d_diff_k_0_max__ = B;
        for (size_t j_1__ = 0; j_1__ < d_diff_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < d_diff_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "d_diff" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t d_or_j_1_max__ = K;
        size_t d_or_k_0_max__ = B;
        for (size_t j_1__ = 0; j_1__ < d_or_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < d_or_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "d_or" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t d_lor_j_1_max__ = K;
        size_t d_lor_k_0_max__ = B;
        for (size_t j_1__ = 0; j_1__ < d_lor_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < d_lor_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "d_lor" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
    }
    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
        }
        if (!include_gqs__) return;
        size_t p_rng_j_1_max__ = (K - 1);
        size_t p_rng_k_0_max__ = B;
        for (size_t j_1__ = 0; j_1__ < p_rng_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < p_rng_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "p_rng" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t p_j_1_max__ = (K - 1);
        for (size_t j_1__ = 0; j_1__ < p_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "p" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t d_diff_j_1_max__ = K;
        size_t d_diff_k_0_max__ = B;
        for (size_t j_1__ = 0; j_1__ < d_diff_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < d_diff_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "d_diff" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t d_or_j_1_max__ = K;
        size_t d_or_k_0_max__ = B;
        for (size_t j_1__ = 0; j_1__ < d_or_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < d_or_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "d_or" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t d_lor_j_1_max__ = K;
        size_t d_lor_k_0_max__ = B;
        for (size_t j_1__ = 0; j_1__ < d_lor_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < d_lor_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "d_lor" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
    }
}; // model
}  // namespace
typedef model_dm_namespace::model_dm stan_model;
#ifndef USING_R
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
#endif
#endif
